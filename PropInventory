# -----Importing-----
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import json
import os

mainInventory = tk.Tk()
mainInventory.title("Prop Room Inventory")

winWidth = 1200
winHeight = 800
scrWidth = mainInventory.winfo_screenwidth()
scrHeight = mainInventory.winfo_screenheight()
midX = int(scrWidth / 2 - winWidth / 2)
midY = int(scrHeight / 2 - winHeight / 2)

mainInventory.geometry(f"{winWidth}x{winHeight}+{midX}+{midY}")

if os.path.getsize("./prop_inventory.json") == 0:
    x = list()
    with open("prop_inventory.json", "w") as file:
        json.dump(x, file)

global inventoryTree


def propRegistry():
    def saveProp():
        pn = propName.get()
        pc = propCondition.get()
        pl = propLocation.get()
        pd = propDesc.get()

        d = {"Name": pn,
             "Condition": pc,
             "Location": pl,
             "Description": pd,
             "Check-in/out": True,
             "Check-name": ""}
        with open("prop_inventory.json", "r+") as outfile:
            file_data = json.load(outfile)
            file_data.append(d)
            outfile.seek(0)
            json.dump(file_data, outfile, indent=4)
        inventoryTree.insert("", tk.END, values=(pn, pc, pl, pd, "In", d["Check-name"]))
        messagebox.showinfo("Done!", "Prop saved!")
        propRegWin.destroy()
        return

    propRegWin = tk.Toplevel()
    winWidth = 600
    winHeight = 400
    scrWidth = propRegWin.winfo_screenwidth()
    scrHeight = propRegWin.winfo_screenheight()
    midX = int(scrWidth / 2 - winWidth / 2)
    midY = int(scrHeight / 2 - winHeight / 2)

    propRegWin.geometry(f"{winWidth}x{winHeight}+{midX}+{midY}")

    propName = tk.StringVar()
    propCondition = tk.StringVar()
    propLocation = tk.StringVar()
    propDesc = tk.StringVar()

    tk.Label(propRegWin, text="Prop").pack()
    propName = tk.Entry(propRegWin, textvariable=propName)
    propName.pack()
    tk.Label(propRegWin, text="Condition").pack()
    propCondition = tk.Entry(propRegWin, textvariable=propCondition)
    propCondition.pack()
    tk.Label(propRegWin, text="Location").pack()
    propLocation = tk.Entry(propRegWin, textvariable=propLocation)
    propLocation.pack()
    tk.Label(propRegWin, text="Description (opt.)").pack()
    propDesc = tk.Entry(propRegWin, textvariable=propDesc)
    propDesc.pack()

    tk.Button(propRegWin, text="Save", command=saveProp).pack()

    propRegWin.mainloop()


def delete(win, focus, index):
    delete.called = True
    propInfo = win
    answer = messagebox.askokcancel("Wait!", "Are you sure you want to delete this prop?")
    if answer:
        with open("prop_inventory.json", "r+") as outfile:
            file_data = json.load(outfile)
            file_data.pop(index)
            outfile.seek(0)
            json.dump(file_data, outfile, indent=4)
            outfile.truncate()
        inventoryTree.delete(focus)
        messagebox.showinfo("Success", "Prop deleted!")
        propInfo.destroy()


delete.called = False

def propSelected(event):
    def check():
        in_out = check_var.get()
        name = nameEntry.get()
        with open("prop_inventory.json", "r+") as outfile:
            file_data = json.load(outfile)
            if in_out == 1:
                file_data[index]["Check-in/out"] = True
                file_data[index]["Check-name"] = ""
                x = "In"
                inventoryTree.item(focus, values=(file_data[index]["Name"],
                                                  file_data[index]["Condition"],
                                                  file_data[index]["Location"],
                                                  file_data[index]["Description"],
                                                  x,
                                                  file_data[index]["Check-name"]))
                messagebox.showinfo("Success", "Prop checked in! Thank you for returning it :)")
                propInfo.destroy()
            elif in_out == 0:
                if not name:
                    messagebox.showinfo("Uh-oh", "Please enter your name!")
                else:
                    file_data[index]["Check-in/out"] = False
                    file_data[index]["Check-name"] = name
                    x = "Out"
                    messagebox.showinfo("Success", "Prop checked out!")
                    inventoryTree.item(focus, values=(file_data[index]["Name"],
                                                      file_data[index]["Condition"],
                                                      file_data[index]["Location"],
                                                      file_data[index]["Description"],
                                                      x,
                                                      name))
                    propInfo.destroy()
            outfile.seek(0)
            json.dump(file_data, outfile, indent=4)
            outfile.truncate()

    if delete.called:
        return
    propInfo = tk.Toplevel(mainInventory)
    propInfo.title("Prop Information")

    winWidth = 600
    winHeight = 400
    scrWidth = propInfo.winfo_screenwidth()
    scrHeight = propInfo.winfo_screenheight()
    midX = int(scrWidth / 2 - winWidth / 2)
    midY = int(scrHeight / 2 - winHeight / 2)

    propInfo.geometry(f"{winWidth}x{winHeight}+{midX}+{midY}")

    with open("prop_inventory.json", "r") as file:
        prop_data = json.load(file)

    focus = inventoryTree.focus()
    index = inventoryTree.index(focus)

    listbox = tk.Listbox(propInfo, height=7, width=30)
    listbox.insert(1, prop_data[index]["Name"])
    listbox.insert(2, prop_data[index]["Condition"])
    listbox.insert(3, prop_data[index]["Location"])
    listbox.insert(4, prop_data[index]["Description"])

    listbox.pack()

    check_var = tk.IntVar()

    tk.Label(propInfo, text="Check in or check out?").pack()
    checkyes = tk.Radiobutton(propInfo, text="Check in", variable=check_var, value=1)
    checkyes.pack()
    checkyes.select()
    checkno = tk.Radiobutton(propInfo, text="Check out", variable=check_var, value=0)
    checkno.pack()

    name = tk.StringVar()
    tk.Label(propInfo, text="Your name? (If you're checking out)").pack()
    nameEntry = tk.Entry(propInfo, textvariable=name)
    nameEntry.pack()

    tk.Button(propInfo, text="Save", command=check).pack()
    tk.Button(propInfo, text="Delete Prop", command=lambda: delete(propInfo, focus, index)).pack()

    propInfo.mainloop()


with open("prop_inventory.json", "r") as file:
    prop_data = json.load(file)

columns = ("names", "condition", "location", "description", "in/out", "check-name")
inventoryTree = ttk.Treeview(mainInventory, columns=columns, show="headings")

inventoryTree.heading("names", text="Name")
inventoryTree.heading("condition", text="Condition")
inventoryTree.heading("location", text="Location")
inventoryTree.heading("description", text="Description")
inventoryTree.heading("in/out", text="Check-in/out")
inventoryTree.heading("check-name", text="By who?")

for index, value in enumerate(prop_data):
    x = " "
    if prop_data[index]["Check-in/out"]:
        x = "In"
    elif not prop_data[index]["Check-in/out"]:
        x = "Out"
    inventoryTree.insert("", tk.END, values=(
        prop_data[index]["Name"],
        prop_data[index]["Condition"],
        prop_data[index]["Location"],
        prop_data[index]["Description"],
        x,
        prop_data[index]["Check-name"])
                         )

inventoryTree.bind("<<TreeviewSelect>>", propSelected)
inventoryTree.pack()

tk.Button(mainInventory, text="Add Prop", command=propRegistry).pack()

mainInventory.mainloop()
